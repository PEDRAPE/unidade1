# UNIFOR
**Nome**: JOAO PEDRO MUNIZ 
**Disciplina**: Raciocínio lógico algorítmico

## Exercício exemplo 1
Implemente e teste um programa que imprima os n primeiros números.

#### Fluxograma
```mermaid
flowchart TD
A([INICIO]) --> B{{Digite um número: }}
B --> C[\n\]
C --> D[\num = 1\]
D --> E{num <= n}
E --FALSE--> I([FIM])
E --TRUE--> F{{"Num", num}}
F --> G[num =+ 1]
G --LOOP--> E
```

#### Pseudocódigo
```
1 ALGORITMO print_n_primeiros
2 DECLARE n, num: INTEIRO
3 INICIO
4 ESCREVA “Digite um número: ”
4 LEIA n			// variável de entrada n
4 num ← 1			// variável num inicializada
5 ENQUANTO num <= n FAÇA	// n iterações
7	ESCREVA “Número ”, num
8	num ← num + 1		// num =+ 1 (incremento)
8 FIM_ENQUANTO
9 FIM
```

#### Teste de mesa
| it | n  | num | num <= n | Saída      | num =+ 1 |
| -- | -- | --  | --       | --         | --       |
| 1  | 10 | 1   | True     | Número 1   | 2        |
| 2  | 10 | 2   | True     | Número 2   | 3        |
| 3  | 10 | 3   | True     | Número 3   | 4        |
| 4  | 10 | 4   | True     | Número 4   | 5        |
| 5  | 10 | 5   | True     | Número 5   | 6        |
| 6  | 10 | 6   | True     | Número 6   | 7        |
| 7  | 10 | 7   | True     | Número 7   | 8        |
| 8  | 10 | 8   | True     | Número 8   | 9        |
| 9  | 10 | 9   | True     | Número 9   | 10       |
| 10 | 10 | 11  | True     | Número 10  | 11       |
| 11 | 10 | 11  | False    |            |          |

## Exercício exemplo 2
Implemente e teste um programa que some os n primeiros números.

#### Fluxograma
```mermaid
flowchart TD
A([INICIO]) --> B{{Digite um número: }}
B --> C[\n\]
C --> D[\soma = 0\]
D --> E[[i=1 ATÉ n PASSO 1]]
E --> G([FIM])
E --> F[soma =+ i]
F --LOOP--> E
```

#### Pseudocódigo
```
1  ALGORITMO	soma_n_numeros()
2  DECLARE	n, i, soma: INTEIRO
3  INICIO
4  ESCREVA “Digite a quantidade de números: ”
5  LEIA n		// variável de entrada n
7  soma ← 0		// variável soma inicializada
6  PARA i DE 1 ATÉ n PASSO 1 FAÇA
7	soma ← soma + i	// soma =+ i (incremento)
8  FIM_PARA
9  ESCREVA “A soma é igual a ”, soma
10 FIM
```

#### Teste de mesa
| it | n  | soma | i  | soma =+ i |
| -- | -- | --   | -- | --        |
| 1  | 10 | 0    | 1  | 1         |
| 2  | 10 | 1    | 2  | 3         |
| 3  | 10 | 3    | 3  | 6         |
| 4  | 10 | 6    | 4  | 10        |
| 5  | 10 | 10   | 5  | 15        |
| 6  | 10 | 15   | 6  | 21        |
| 7  | 10 | 21   | 7  | 28        |
| 8  | 10 | 28   | 8  | 36        |
| 9  | 10 | 36   | 9  | 45        |
| 10 | 10 | 45   | 10 | 55        | 

## Lista de exercícios 03

### Exercício 01 (2.5 pontos)
Atualize o algoritmo para determinar se um número inteiro e positivo é par ou ímpar, usando uma laço condicional para aceitar apenas números maiores ou iguais a zero. 

#### Fluxograma (1.0 ponto)

```mermaid
graph
INICIO-->a([Escreva o numero:])
a-->b[[num]]
b-->c((num >=0))
c--false-->d{{numero tem que ser maior ou igual a zero}}
c--true-->e{{num % 2 = 1}}
e--true-->f[(numero é impar)]
e--false-->A[(numero é par)]
A-->FIM
f-->FIM
d-->FIM
```

#### Pseudocódigo (1.0 ponto)

```
Algoritmo_parimpar
DECLARE num INTEIRO
SE num >=0
	ENTAO
		SE num % 2 = 1
			ENTAO
				ESCREVA "numero impar"
			SENAO
				ESCREVA "numero par"
	SENAO
		ESCREVA "numero tem que ser maior ou igual a zero"

```

#### Teste de mesa (0.5 ponto)

| num          |    num >=0   | num%2=1      | saida        
|      --      |      --      |      --      |      --     
| 7            | true         | true         |  numero impar
| -1           | false        |  ---         | numero tem que ser >=0
|10            | true         | false        | numero par


### Exercício 02 (2.5 pontos)
Faça um algoritmo que exiba na tela uma contagem de 0 até 30, exibindo apenas os múltiplos de 3.

#### Fluxograma (1.0 ponto)

```mermaid
flowchart TD
INICIO-->a([i=1 ATÉ 10 PASSO 1])
a-->b{{num = +3}}
b-->a
a-->FIM
```

#### Pseudocódigo (1.0 ponto)

```
Algoritmo_30
DECLARE num ,i INTEIRO
PARA i DE 1 ATE 10 PASSO 1 FAÇA
	num = +3
FIM

```

#### Teste de mesa (0.5 ponto)

|  i           | num=+3       | i = 10       |    saida     | 
|      --      |      --      |      --      |      --      |
|1             | 3            | false        | 3
|2             | 6            | false        | 6
|10            | 30           | true         | 30


### Exercício 03 (2.5 pontos)
Dada uma sequência de números inteiros, calcular a sua soma. 
Por exemplo, para a sequência {12, 17, 4, -6, 8, 0}, o seu programa deve escrever o número 35.

#### Fluxograma (1.0 ponto)

```mermaid
flowchart TD
INICIO-->a{{digite a quantidade de numeros:}}
a-->b([quant])
b-->c(quant=!0 E quant>0)
c--true-->d[[digite a unidade:]]
d-->e((un))
e-->f([soma =+un])
f-->A(quant =-1)
A-->c
c--false-->B{{o resultado é:'soma'}}
```

#### Pseudocódigo (1.0 ponto)

```
Algoritmo_soma
DECLARE quant ,un ,soma INTEIROS
ESCREVA "digite a quantidade de numeros:"
LEIA quant
ENQUANTO quant =! 0 OU quant > 0 FAÇA
	ESCREVA "digite a unidade:"
	LEIA un 
	soma =+un
	quant =-1
FIM_ENQUANTO
ESCREVA "o resultado é:'soma'"
FIM

```

#### Teste de mesa (0.5 ponto)

| quant        | quant =!0    | quant >0     | un           | soma +un     |saida 
|      --      |      --      |      --      |      --      |      --      | --
| 2            | true         | true         |  10          | 10           |- - -
| 1            |   true       | true         | 20           | 30           |- - - 
|0             | false        | false        |- - -         |- - -| o resultado é :'30'

### Exercício 04 (2.5 pontos)
Escreva um programa que leia a nota de diversos alunos, até que seja digitada uma nota negativa. 
Nesse momento, ele mostra a média aritmética de todas as notas lidas e quantas notas foram lidas. 
Ex. Foram lidas 14 notas. A média aritmética é 6.75!

#### Fluxograma (1.0 ponto)

```mermaid
flowchart TD
INICIO-->a([digite a nota do aluno:])
a-->b[[nota]]
b-->c{nota >= 0}
c--true-->d{{quant=+1}}
d-->e(total =+nota)
e-->a
c--false-->f{{foram lidas 'quant' notas}}
f-->A[[media é:'total/quant']]
A-->FIM
```

#### Pseudocódigo (1.0 ponto)

```
Algoritmo_media
DECLARE nota ,quant ,total INTEIROS
nota<--0
ENQUANTO nota >= 0 FAÇA
	ESCREVA "digite a nota:"
	LEIA nota
	quant=+1
	total=+nota
FIM_ENQUANTO
ESCREVA "foram lidas 'quant' notas
ESCREVA "a media é:'total/quant'"
FIM
```

#### Teste de mesa (0.5 ponto)

| nota         | quant=+1     | total=+nota  | saida1       | saida2       | 
|      --      |      --      |      --      |      --      |      --      | 
|10            | 1            |  10          | - - -        |- - -
|4             | 2            | 14           |- - -         |- - -
|-1            | - - -        | - - -        |notas lidas:2 |media é: 7    
